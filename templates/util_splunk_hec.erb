#!/opt/puppetlabs/puppet/bin/ruby

require 'facter'
require 'fileutils'
require 'net/http'
require 'net/https'
require 'uri'
require 'yaml'
require 'json'
require 'time'

# Rails has deep merge, but pure ruby does not. So we need to implement it ourselves.
class ::Hash
  def deep_merge(second)
      merger = proc { |key, v1, v2| Hash === v1 && Hash === v2 ? v1.merge(v2, &merger) : v2 }
      self.merge(second, &merger)
  end
end

@confdir  = '/etc/puppetlabs/puppet/splunk_hec'

INDICES = {
  'orchestrator' => 'puppet:jobs',
  'rbac'         => 'puppet:activities_rbac',
  'classifier'   => 'puppet:activities_classifier',
  'pe-console'   => 'puppet:activities_console',
  'code-manager' => 'puppet:activities_code_manager'
}

@settings_file = "#{@confdir}/settings.yaml"
@secrets_file = "#{@confdir}/hec_secrets.yaml"

def settings
  @settings ||= YAML.load_file(@settings_file)
end

def secrets
  @secrets ||= YAML.load_file(@secrets_file)
end

def build_ca_store(cert_store_file_path)
  store = OpenSSL::X509::Store.new
  store.add_file(cert_store_file_path)
  store
end

def create_http(source_type)
  splunk_url = get_splunk_url(source_type)
  @uri = URI.parse(splunk_url)
  timeout = settings['timeout'] || '5'
  http = Net::HTTP.new(@uri.host, @uri.port)
  http.open_timeout = timeout.to_i
  http.read_timeout = timeout.to_i
  http.use_ssl = @uri.scheme == 'https'
  if http.use_ssl?
    if (settings['ssl_ca'] && !settings['ssl_ca'].empty?) || settings['include_system_cert_store']
      ssl_ca_file = if settings['ssl_ca']
                      File.join(@confdir, settings['ssl_ca'])
                    elsif !settings['ssl_ca'] && Facter.value(:os)['family'].eql?('RedHat')
                      '/etc/ssl/certs/ca-bundle.crt'
                    elsif !settings['ssl_ca'] && Facter.value(:os)['family'].eql?('Suse')
                      '/etc/ssl/ca-bundle.pem'
                    else
                      '/etc/ssl/certs/ca-certificates.crt'  
                    end
      message     = if settings['ssl_ca']
                      "Puppet will verify #{splunk_url} SSL identity against Splunk HEC SSL #{settings['ssl_ca']}"
                    else
                      "Puppet will verify #{splunk_url} SSL identity against system store"
                    end

      unless File.exist?(ssl_ca_file) && !File.zero?(ssl_ca_file)
        raise Puppet::Error,
        "CA file #{ssl_ca_file} is an empty file or does not exist"
      end

      ssl_ca = build_ca_store(ssl_ca_file)
      http.cert_store = ssl_ca
      http.verify_mode = OpenSSL::SSL::VERIFY_PEER
      puts message
    else
      message = "Puppet will NOT verify #{splunk_url} SSL identity"
      puts message
      http.verify_mode = OpenSSL::SSL::VERIFY_NONE
    end
  end

  http
end

def submit_request(body)
  # we want users to be able to provide different tokens per sourcetype if they want
  source_type = 'events'
  token_name = "token_#{source_type}"
  http = create_http(source_type)
  token = secrets[token_name] || secrets['token'] || raise('Must provide token parameter to splunk class')
  req = Net::HTTP::Post.new(@uri.path.to_str)
  req.add_field('Authorization', "Splunk #{token}")
  req.add_field('Content-Type', 'application/json')
  req.content_type = 'application/json'
  # req.body = body.to_json
  req.body = body
  http.request(req)
end

def get_splunk_url(source_type)
  url_name = "url_#{source_type}"
  settings[url_name] || settings['url'] || raise('Must provide url parameter to splunk class')

end

def pe_console
  settings['pe_console'] || certname
end

def record_event
  result = if settings['record_event'] == 'true'
             true
           else
             false
           end
  result
end

# standard function to make sure we're using the same time format our sourcetypes are set to parse
def sourcetypetime(time, duration = 0)
  parsed_time = time.is_a?(String) ? Time.parse(time) : time
  total = Time.parse((parsed_time + duration).iso8601(3))
  '%10.3f' % total.to_f
end

def extract_events(events_data, index, selectors)
  events_collector = []

  return unless !events_data['events'].nil?

  events_data['events'].map do |event|
    collector = {}
    data      = {}

    selectors.each do |selector|
      build_data(collector, event, selector.split('.'))
      data = data.deep_merge(collector)
    end unless selectors.nil?

    events_collector << {
      'time'       => sourcetypetime(event['created_timestamp'] || event['timestamp']),
      'host'       => settings['pe_console'],
      'sourcetype' => index,
      'event'      => data.empty? ? event : data
    }.to_json
  end

  "#{events_collector.join("\n")}\n"
end

def build_data(final_data, event, path)
  if path.count == 1
    if event[path[0]].nil?
      puts "ERROR with last FILTER KEY; Check your filter parameter"
    end
    final_data[path[0]] = event[path[0]]
    final_data
  else
    begin
      dig_result          = event.dig(*path[0,1])
      final_data[path[0]] = {}
      build_data(final_data[path[0]], dig_result, path[1..-1])
    rescue => e
      puts "Potential ERROR with middle FILTER KEY: #{e.backtrace}"
    end
  end
end
